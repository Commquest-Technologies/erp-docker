version: '3.9'

services:
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v3.3}
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    deploy:
      placement:
        constraints:
          - node.labels.traefik-public.traefik-public-certificates == true
      replicas: 1
      update_config:
        order: start-first
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 512M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        
        # Dashboard Router Configuration
        - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN:?Missing TRAEFIK_DOMAIN variable}`)
        - traefik.http.routers.dashboard.entrypoints=websecure
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.routers.dashboard.tls=true
        - traefik.http.routers.dashboard.tls.certresolver=le
        
        # Security Middleware
        - traefik.http.middlewares.admin-auth.basicauth.users=${HASHED_PASSWORD:?Missing HASHED_PASSWORD variable}
        - traefik.http.middlewares.secure-headers.headers.sslredirect=true
        - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
        - traefik.http.middlewares.secure-headers.headers.forceSTSHeader=true
        - traefik.http.middlewares.secure-headers.headers.sslHost=${TRAEFIK_DOMAIN:?Missing TRAEFIK_DOMAIN variable}
        - traefik.http.middlewares.secure-headers.headers.sslForceHost=true
        - traefik.http.middlewares.secure-headers.headers.browserXssFilter=true
        - traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true
        - traefik.http.middlewares.secure-headers.headers.frameDeny=true
        
        # Apply Security Middleware
        - traefik.http.routers.dashboard.middlewares=admin-auth,secure-headers
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/certificates
    environment:
      - TZ=${TZ:-Africa/Johannesburg}
    command:
      # Provider Configuration
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.constraints=Label('traefik.constraint-label', 'traefik-public')
      - --providers.swarm.network=traefik-public
      
      # Entrypoints Configuration
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      
      # Let's Encrypt Configuration
      - --certificatesresolvers.le.acme.email=${EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      
      # Logging and API Configuration
      - --api.dashboard=true
      - --api.insecure=false
      - --log.level=${LOG_LEVEL:-INFO}
      - --accesslog=true
      - --accesslog.filepath=/dev/stdout
      - --accesslog.bufferingsize=100
      
      # Security Configuration
      - --global.sendAnonymousUsage=false
      - --global.checkNewVersion=false
    networks:
      - traefik-public
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 2s
      retries: 3
    secrets:
      - source: traefik_passwd
        target: /run/secrets/traefik_passwd

volumes:
  traefik-certificates:
    driver: local
    driver_opts:
      type: none
      device: ${CERTS_PATH:-/var/lib/traefik/certs}
      o: bind

networks:
  traefik-public:
    external: true

secrets:
  traefik_passwd:
    external: true